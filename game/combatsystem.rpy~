init 1 python:
    #import Objects
    #from random import randint
    #from random import uniform
    
    #Declarations. Ideally you would set these early in the game. Not completely done.
    Move1 = Moves("Tackle", 35, 0, 0, 35, 100, 0)
    Move2 = Moves("Tail Whip", 35, 0, 0, 0, 100, 1)
    Poke1 = Pokemon("Bulbasaur", 4, 18, 10, 21, 21, 11, 13, 11, 13, 11, 0)
    Poke2 = Pokemon("Squirtle", 2, 18, 5, 20, 20, 11, 11, 13, 12, 10, 0)
    Poke3 = Pokemon("Bulbasaur", 4, 18, 10, 21, 21, 11, 13, 11, 13, 11, 0)
    Poke4 = Pokemon("Squirtle", 2, 18, 5, 20, 20, 11, 11, 13, 12, 10, 0)
    Red = Trainer("Red", 1)
    Blue = Trainer("Blue", 2)
    
    Red.catchMember(Poke1)
    Red.catchMember(Poke2)
    
    Blue.catchMember(Poke3)
    Blue.catchMember(Poke4)
    
    numPoke = Red.numPoke()
  
    Poke2.currHP = Poke2.currHP
    def stats_frame(name, level, hp, maxhp, **properties):

        ui.frame(xfill=False, yminimum=None, **properties)

        ui.hbox() # (name, "HP", bar) from (level, hp, maxhp)
        ui.vbox() # name from ("HP", bar)

        ui.text(name, size=20)

        ui.hbox() # "HP" from bar
        ui.text("HP", size=20)
        ui.bar(maxhp, hp,
               xmaximum=150)

        ui.close()
        ui.close()

        ui.vbox() # Level from (hp/maxhp)

        ui.text("Lv. %d" % level, xalign=0.5, size=20)
        ui.text("%d/%d" % (hp, maxhp), xalign=0.5, size=20)

        ui.close()
        ui.close()
init:
    $ combat_turn = 0
    
    $ pauseGame = False
    
label combat:
    $ iter = 0

    if combat_turn == 0:
        menu:
            "Choose your Pokemon:"
            "[Red.party[0].name]" if numPoke >= 1:
                $ currPoke = 0
            "[Red.party[1].name]" if numPoke >= 2:
                $ currPoke = 1
            "[Red.party[2].name]" if numPoke >= 3:
                $ currPoke = 2
            "[Red.party[3].name]" if numPoke >= 4:
                $ currPoke = 3
            "[Red.party[4].name]" if numPoke >= 5:
                $ currPoke = 4
            "[Red.party[5].name]" if numPoke == 6:
                $ currPoke = 5
        jump pokemon

label fight:

    # Player Stats Frame
    $ stats_frame(pname, plevel, php, pmaxhp, xalign=.02, yalign=.7)
        
    # Enemy Stats Frame
    $ stats_frame(ename, elevel, ehp, emaxhp, xalign=.98, yalign=.7)
    return
        
label pokemon:
    
    if pauseGame:
        $ pauseGame = False
        jump Pokemon
    else:
        $ php = Red.party[currPoke].currHP
        $ ehp = Poke2.currHP
        
        if php != 0:
            $ pname = Red.party[currPoke].name
            $ plevel = Red.party[currPoke].lvl
            $ pmaxhp = Red.party[currPoke].maxHP
            $ skill_1 = Move1.name
            $ skill_2 = Move2.name
            
        if ehp != 0:
            $ ename = Poke2.name
            $ elevel = Poke2.lvl
            $ emaxhp = Poke2.maxHP
            
            $ skill_1 = Move1
            $ skill_2 = Move2
            
label battle:
    call fight
    $ combat_turn += 1
    $ numSkill = 0
    
    $ skill1_name = skill_1.name
    $ skill2_name = skill_2.name
    
    menu:
        "What would you like to do?"
        "Fight":
            call fight
            menu:
                "What should [pname] do?"
                "[skill1_name]":
                    $ numSkill = 1
                "[skill2_name]":
                     $ numSkill = 2
                     
            jump use_skill
                 
label use_skill:
    call fight
    if numSkill == 1:
        "[pname] used [skill1_name]!"
        $ Red.party[currPoke].attack(Move1, Poke2)
    elif numSkill == 2:
        "[pname] used [skill2_name]!"
        $ Red.party[currPoke].attack(Move2, Poke2)
    
    $ checkEHP = Poke2.currHP    
    if checkEHP <= 0:
        $ ehp = 0
        call fight
        "Enemy [ename] fainted!"
        scene black with dissolve
        centered "You win!"
        $ renpy.full_restart()
        
    call pokemon    
    jump battle
            
